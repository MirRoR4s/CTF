from Crypto.Util.number import *
from secret import flag

m = bytes_to_long(flag)

def get_params(nbits):
    p = getPrime(nbits)
    q = getPrime(nbits // 2)
    r = getPrime(nbits // 2)
    if q < r:
        q, r = r, q
    e = 2023 + 666
    n = p * q * r
    phi = (p-1) * (q-1) * (r-1)
    d = inverse(e, phi)
    return e, n, d, p, q, r

def magic_process(dqr_):
    # only the correct data can pass this magic process!
    w = 11805048190103811318745740902058585490581588391715507077469771342521346595744141604699124341571677599846725074544467374849004088341619160922679491419964725
    x = dqr_ + 666
    y = dqr_ + 667
    PR.<z> = PolynomialRing(ZZ)
    f = w*(x*z+y*z-x*y) - 4*x*y*z
    z = f.roots()[0][0]

    assert w*(x*z+y*z-x*y) - 4*x*y*z == 0

e, n, d, p, q, r = get_params(512)

dqr = d % ((q-1) * (r-1))
dqr_ = (dqr >> 55) << 55
magic_process(dqr_)

print(f'e = {e}')
print(f'qr = {q % r}')
print(f'n = {n}')
print(f'c = {pow(m, e, n)}')

'''
e = 2689
qr = 47039394845246457267451844933135300719863788804596821520575305333413876649846
n = 102275105641047314957681561255971730180031931453885390971560104545784846810054168298038033889926837832908913447331571300831232278972182034546312860462560455575699889259884894407503661740178853200384106267596198200388045685183747251883536380886761864997738495990864526497955511125021398766971363828732464588761
c = 30057873321817268990724095993213394773233077509126537130493293224220768053789109305889627009912877888765075963369699610910695123551381348483962929764830148523075698671087735427795008522625385598116705013490990766089416767372146754468746664865469005120853463146265400060202176870467493380590559736303051981581
'''
